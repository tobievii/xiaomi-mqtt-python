#!/usr/bin/env python3
# coding: utf-8
import logging, sys
from logging import _nameToLevel
import argparse
import paho.mqtt.client as mqtt
from xiaomi_mqtt.connector import XiaomiConnector
from xiaomi_mqtt.mqtt import MqttBridge

parser = argparse.ArgumentParser(description='Xiaomi-to-MQTT gateway')

parser.add_argument('--mqtt-host', default="localhost", help='MQTT broker hostname')
parser.add_argument('--mqtt-port', type=int, default=1883, help='MQTT broker port')
parser.add_argument('--mqtt-user', help='MQTT user name', default=None)
parser.add_argument('--mqtt-password', help='MQTT password', default=None)

parser.add_argument('--log-level', help='console log level (DEBUG, INFO, WARN, ERROR)', default="INFO")

args = parser.parse_args()

MQTT_PORT = 1883
MQTT_USER = 'test'
MQTT_PASSWORD = 'test'

PATH_FMT = "xiaomi/{model}/{sid}/{prop}"  # short_id or sid ?

logging.basicConfig(format='%(levelname)s:%(message)s', level=_nameToLevel[args.log_level])

logging.info("Starting Xiaomi MQTT gateway app...")


def prepare_mqtt():
    userstr = "anonymous" if args.mqtt_user is None else args.mqtt_user

    logging.info("Creating MQTT connection {}@{}:{}".format(userstr, args.mqtt_host, args.mqtt_port))

    client = mqtt.Client()
    if args.mqtt_user is not None:
        client.username_pw_set(
            args.mqtt_user,
            args.mqtt_password,
        )

    client.connect(args.mqtt_host, args.mqtt_port, 60)

    return client


def push_data(client, model, sid, cmd, data):
    for key, value in data.items():
        path = PATH_FMT.format(model=model,
                               sid=sid,
                               cmd=cmd,
                               prop=key)
        client.publish(path, payload=value, qos=0)


def on_metadata(connector, sid, payload):
    logging.info("METADATA CHANGED: sid {}: {}".format(sid, payload))


def on_report(connector, sid, data):
    ldata = connector.get_devices()[sid]['_last_data']
    logging.info("REPORT: sid {}: {}".format(sid, ldata))


def on_data(connector, cmd, sid, payload):
    # if cmd == "iam":
    #     connector.send_get_id_list(payload['sid'])

    if cmd == "report":
        on_report(connector, payload['sid'], payload['data'])


if __name__ == "__main__":
    mqtt_client = prepare_mqtt()
    mqtt_client.loop_start()

    connector = XiaomiConnector(data_callback=on_data, metadata_callback=on_metadata)

    try:
        while True:
            connector.check_incoming()

    except KeyboardInterrupt:
        logging.info('gateway stopped')
        mqtt_client.loop_stop()
        sys.exit(0)
